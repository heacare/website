---
import Actions from "./Actions.astro";

const {
  anchor,
  heading,
  actions,
  headingActions,
  theme,
  align,
  callout,
  quote,
  full,
  hasGraphic,
} = Astro.props;

let outerClass = "";
if (theme) {
  outerClass += " theme-" + theme;
}
if (align) {
  outerClass += " align-" + align;
}
if (callout) {
  outerClass += " callout";
}
if (quote) {
  outerClass += " quote";
}
if (full) {
  outerClass += " full";
}
---

<section class={outerClass}>
  <div class="inner">
    {
      hasGraphic && (
        <div class="graphic">
          <slot name="graphic" />
        </div>
      )
    }
    <div class="content">
      {anchor && <a id={anchor} aria-hidden="true" />}
      <div class="margins">
        {
          headingActions ? (
            <div class="heading-area">
              <h1>{heading}</h1>
              <Actions actions={headingActions} />
            </div>
          ) : (
            heading && <h1>{heading}</h1>
          )
        }
        <slot />
        {actions && <Actions actions={actions} />}
      </div>
    </div>
  </div>
</section>

<style>
  .theme-normal {
    background: white;
  }
  .theme-normal-alt {
    background: linear-gradient(
      104.29deg,
      rgba(255, 176, 57, 0.1) 17.32%,
      rgba(255, 90, 255, 0.1) 89.26%
    );
  }
  .theme-gradient {
    background: linear-gradient(104.29deg, #ffb039 17.32%, #ff5aff 89.26%);
    --color-content: var(--color-content-inverted);
    --color-button: var(--color-button-inverted);
    --color-button-background: var(--color-button-background-inverted);
    color: var(--color-content);
  }
  .theme-gradient h1 {
    background: none;
    background-clip: initial;
    -webkit-background-clip: initial;
    color: var(--color-content);
  }

  section {
    padding: 0 var(--gap-sides);
    /* Keep graphics and margins inside box */
    overflow: hidden;
  }

  .quote {
    font-size: var(--font-scale-quote);
  }

  .inner {
    max-width: var(--width-md);
    margin: 0 auto;
  }
  .callout .inner {
    max-width: var(--width-sm);
  }
  .full .inner {
    max-width: none;
  }
  .align-left .inner {
    text-align: left;
    --items-align: left;
    display: flex;
    flex-direction: row-reverse;
    align-items: center;
  }
  .align-right .inner {
    text-align: left;
    --items-align: right;
    display: flex;
    flex-direction: row;
    align-items: center;
  }
  .align-center .inner {
    text-align: center;
    --items-align: center;
  }
  @media screen and (max-width: 640px) {
    .align-right .inner,
    .align-left .inner {
      flex-direction: column;
    }
  }

  .margins {
    margin: var(--gap-section) auto;
  }
  .full .margins {
    margin: var(--gap-section-full) auto;
  }

  .graphic {
    flex: 1;

    margin: var(--gap-section-graphic) 0;
    --exit: calc(var(--gap-sides) * -1);
  }
  .graphic :global(img) {
    width: 100%;
  }
  .align-left .graphic {
    margin-right: var(--exit);
    margin-left: var(--gap-content-vertical);

    position: relative;
    right: -9vw;
  }
  .align-right .graphic {
    margin-left: var(--exit);
    margin-right: var(--gap-content-vertical);

    position: relative;
    left: -9vw;
  }
  @media screen and (max-width: 640px) {
    .graphic {
      margin: var(--gap-section) 0 calc(var(--gap-content) - var(--gap-section))
        0 !important;
      position: static !important;
    }

    .graphic :global(img) {
      width: 40%;
    }
  }
  @media screen and (min-width: 1088px) {
    .graphic {
      --exit: calc(-23.5vw + 192px);
    }
  }

  .content {
    flex: 1;
  }

  .heading-area {
    display: flex;
    align-items: center;
    /* Collapse surrounding margins */
    margin: -2rem 0;
  }
  .heading-area h1 {
    flex: 1;
  }
  .heading-area .actions {
  }
  @media screen and (max-width: 640px) {
    .heading-area {
      display: block;
      margin: 0;
    }
  }
</style>

<script>
  import onScroll from "../onscroll.ts";

  onScroll(
    document.querySelectorAll("section > .inner > .graphic"),
    (ele) => ele,
    (ele, { scrollY, innerHeight, innerWidth }) => {
      const startOffset = ele.offsetTop - innerHeight - 16 * 8;
      const endOffset = ele.offsetTop + ele.offsetHeight + 16 * 8;
      const shift =
        ((scrollY - startOffset) / (endOffset - startOffset)) * 2 - 1;
      const offset = shift * 200;
      if (innerWidth <= 640 && offset >= 0) {
        ele.style.transform = `translateY(0px)`;
        return;
      }
      if (scrollY < startOffset) {
        ele.style.transform = `translateY(0px)`;
      } else if (scrollY < endOffset) {
        ele.style.transform = `translateY(${offset}px)`;
      } else {
        ele.style.transform = `translateY(0px)`;
      }
    }
  );
</script>
